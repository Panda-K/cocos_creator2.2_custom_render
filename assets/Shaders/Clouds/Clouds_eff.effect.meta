{
  "ver": "1.0.23",
  "uuid": "92092c69-f1c3-4080-a4f9-36d9d105541e",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nvarying vec2 v_uv2;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n\n  float time1 = mod(cc_time.x * 0.02, 1.0);\n  float time2 = mod(cc_time.x * 0.05, 1.0);\n  v_uv1 = a_uv0;\n  v_uv1.x += time1;\n\n  v_uv2 = a_uv0;\n  v_uv2.xy += time2;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision mediump float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec2 v_uv1;\nvarying vec2 v_uv2;\nuniform sampler2D texture;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n\n  o *= texture2D(texture1, v_uv1) * texture2D(texture2, v_uv2);\n  o.a = (o.r + o.g + o.b) * 0.33;\n\n  o -= 1.0 - 2.0;\n  o = max(o, 0.0);\n  o *= (1.0 / 2.0);\n\n  o.r = 1.0 - o.r;\n  o.g = 1.0 - o.g;\n  o.b = 1.0 - o.b;\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\nout vec2 v_uv1;\nout vec2 v_uv2;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n\n  float time1 = mod(cc_time.x * 0.02, 1.0);\n  float time2 = mod(cc_time.x * 0.05, 1.0);\n  v_uv1 = a_uv0;\n  v_uv1.x += time1;\n\n  v_uv2 = a_uv0;\n  v_uv2.xy += time2;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision mediump float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec2 v_uv1;\nin vec2 v_uv2;\nuniform sampler2D texture;\nuniform sampler2D texture1;\nuniform sampler2D texture2;\n#endif\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n\n  o *= texture(texture1, v_uv1) * texture(texture2, v_uv2);\n  o.a = (o.r + o.g + o.b) * 0.33;\n\n  o -= 1.0 - 2.0;\n  o = max(o, 0.0);\n  o *= (1.0 / 2.0);\n\n  o.r = 1.0 - o.r;\n  o.g = 1.0 - o.g;\n  o.b = 1.0 - o.b;\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}