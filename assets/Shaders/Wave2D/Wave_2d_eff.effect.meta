{
  "ver": "1.0.23",
  "uuid": "07aeaadd-7b33-4599-998f-5dcf0f36ea19",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec2 a_uv0;\n\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_color = a_color;\n  v_uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\nuniform vec4 cc_time;\n\nvarying vec4 v_color;\nvarying vec2 v_uv0;\n\nuniform sampler2D texture;\n\nuniform float amplitude;\nuniform float angularVelocity;\nuniform float frequency;\nuniform float offset;\nuniform bool toLeft;\n\nvoid main () {\n  vec4 color = v_color;\n  color *= texture2D(texture, v_uv0);\n  if(color.a == 0.0) discard;\n  float y = amplitude * sin((angularVelocity * v_uv0.x) + ((frequency * cc_time.x) * (toLeft ? 1. : -1.))) + offset;\n  float y1 = amplitude * sin((angularVelocity * v_uv0.x) + ((frequency * cc_time.x-0.5) * (toLeft ? 1. : -1.))) + offset;\n\n  if(v_uv0.y < y && v_uv0.y > y1) {\n    color = vec4(0.95, 0.745, 0.275, color.a);\n  }\n  else if(v_uv0.y < y) discard;\n  gl_FragColor = color;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nin vec2 a_uv0;\n\nout vec4 v_color;\nout vec2 v_uv0;\n\nvoid main () {\n  gl_Position = cc_matViewProj * vec4(a_position, 1);\n  v_color = a_color;\n  v_uv0 = a_uv0;\n}\n",
        "frag": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nin vec4 v_color;\nin vec2 v_uv0;\n\nuniform sampler2D texture;\n\nuniform Properties {\n  float amplitude;\n\n  float angularVelocity;\n\n  float frequency;\n\n  float offset;\n\n  bool toLeft;\n\n};\n\nvoid main () {\n  vec4 color = v_color;\n  color *= texture(texture, v_uv0);\n  if(color.a == 0.0) discard;\n  float y = amplitude * sin((angularVelocity * v_uv0.x) + ((frequency * cc_time.x) * (toLeft ? 1. : -1.))) + offset;\n  float y1 = amplitude * sin((angularVelocity * v_uv0.x) + ((frequency * cc_time.x-0.5) * (toLeft ? 1. : -1.))) + offset;\n\n  if(v_uv0.y < y && v_uv0.y > y1) {\n    color = vec4(0.95, 0.745, 0.275, color.a);\n  }\n  else if(v_uv0.y < y) discard;\n  gl_FragColor = color;\n}\n"
      }
    }
  ],
  "subMetas": {}
}