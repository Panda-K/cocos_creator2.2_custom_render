{
  "ver": "1.0.23",
  "uuid": "f99c5cee-9832-4552-ae08-51e84b50e4ed",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform vec4 u_blocksPos[4];\nuniform vec2 u_playerPos;\n\nfloat energy(float r, vec2 point1, vec2 point2) {\n  return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  vec2 u_blocksPosV2[8];\n  \n  int index = 0;\n\n  u_blocksPosV2[0] = u_blocksPos[0].xy;\n  u_blocksPosV2[1] = u_blocksPos[0].zw;\n  u_blocksPosV2[2] = u_blocksPos[1].xy;\n  u_blocksPosV2[3] = u_blocksPos[1].zw;\n  u_blocksPosV2[4] = u_blocksPos[2].xy;\n  u_blocksPosV2[5] = u_blocksPos[2].zw;\n  u_blocksPosV2[6] = u_blocksPos[3].xy;\n  u_blocksPosV2[7] = u_blocksPos[3].zw;\n\n  float disSqr_1 = 0.042*0.042;\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n\n    #endif\n  #endif\n\n  o *= v_color;\n  bool inArea = true;\n  float fragEnergy = energy(0.2, v_uv0.xy, u_playerPos);\n  float tmpA = 1.0 - smoothstep(0.5, 1.0, fragEnergy);\n  o.a *= tmpA;\n  float oldA = o.a;\n\n  if(tmpA == 1.0){\n    inArea = false;\n  }\n\n  if(inArea == true){\n    for(int i = 0; i < 8; i++) {\n      if(u_blocksPosV2[i].x == -1.0 || u_blocksPosV2[i].y == -1.0){\n        continue;\n      }\n\n      vec2 block1 = u_blocksPosV2[i].xy;\n      vec2 v_BP = normalize(block1 - u_playerPos);\n\n      vec2 v_UP = normalize(v_uv0 - u_playerPos);\n\n      float disSqrPB1 = (u_playerPos.x-block1.x)*(u_playerPos.x-block1.x) + (u_playerPos.y-block1.y)*(u_playerPos.y-block1.y);\n\n      float disSqr1_2 = disSqrPB1 - disSqr_1;\n\n      float disUVP1 = (v_uv0.x-u_playerPos.x)*(v_uv0.x-u_playerPos.x) + (v_uv0.y-u_playerPos.y)*(v_uv0.y-u_playerPos.y);\n\n      float disUVB1 = (v_uv0.x-block1.x)*(v_uv0.x-block1.x) + (v_uv0.y-block1.y)*(v_uv0.y-block1.y);\n\n      float cosSqr = 1.0 - (disSqr_1/disSqrPB1);\n      float up_Dot_bp = dot(v_UP, v_BP);\n\n      bool inBigFanR = false;\n      if (up_Dot_bp >= 0.0) {\n        if(up_Dot_bp * up_Dot_bp > (cosSqr)) {\n          inBigFanR = true;\n        }\n      } \n      if(inBigFanR){\n        o.a = 0.862;\n      }\n\n      bool inFanR = false;\n\n      if(disUVP1 < disSqr1_2){\n        if (up_Dot_bp >= 0.0) {\n          if(up_Dot_bp * up_Dot_bp > (1.0-disSqr1_2-0.01) * cosSqr) {\n            inFanR = true;\n          }\n        } \n      }\n\n      if(inFanR || disUVB1 < disSqr_1) {\n        o.a = 0.0;\n        break;\n      }\n    }\n  }\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform ARGS {\n  vec4 u_blocksPos[4];\n  vec2 u_playerPos;\n\n};\n\nfloat energy(float r, vec2 point1, vec2 point2) {\n  return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  vec2 u_blocksPosV2[8];\n  \n  int index = 0;\n\n  u_blocksPosV2[0] = u_blocksPos[0].xy;\n  u_blocksPosV2[1] = u_blocksPos[0].zw;\n  u_blocksPosV2[2] = u_blocksPos[1].xy;\n  u_blocksPosV2[3] = u_blocksPos[1].zw;\n  u_blocksPosV2[4] = u_blocksPos[2].xy;\n  u_blocksPosV2[5] = u_blocksPos[2].zw;\n  u_blocksPosV2[6] = u_blocksPos[3].xy;\n  u_blocksPosV2[7] = u_blocksPos[3].zw;\n\n  float disSqr_1 = 0.042*0.042;\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n\n    #endif\n  #endif\n\n  o *= v_color;\n  bool inArea = true;\n  float fragEnergy = energy(0.2, v_uv0.xy, u_playerPos);\n  float tmpA = 1.0 - smoothstep(0.5, 1.0, fragEnergy);\n  o.a *= tmpA;\n  float oldA = o.a;\n\n  if(tmpA == 1.0){\n    inArea = false;\n  }\n\n  if(inArea == true){\n    for(int i = 0; i < 8; i++) {\n      if(u_blocksPosV2[i].x == -1.0 || u_blocksPosV2[i].y == -1.0){\n        continue;\n      }\n\n      vec2 block1 = u_blocksPosV2[i].xy;\n      vec2 v_BP = normalize(block1 - u_playerPos);\n\n      vec2 v_UP = normalize(v_uv0 - u_playerPos);\n\n      float disSqrPB1 = (u_playerPos.x-block1.x)*(u_playerPos.x-block1.x) + (u_playerPos.y-block1.y)*(u_playerPos.y-block1.y);\n\n      float disSqr1_2 = disSqrPB1 - disSqr_1;\n\n      float disUVP1 = (v_uv0.x-u_playerPos.x)*(v_uv0.x-u_playerPos.x) + (v_uv0.y-u_playerPos.y)*(v_uv0.y-u_playerPos.y);\n\n      float disUVB1 = (v_uv0.x-block1.x)*(v_uv0.x-block1.x) + (v_uv0.y-block1.y)*(v_uv0.y-block1.y);\n\n      float cosSqr = 1.0 - (disSqr_1/disSqrPB1);\n      float up_Dot_bp = dot(v_UP, v_BP);\n\n      bool inBigFanR = false;\n      if (up_Dot_bp >= 0.0) {\n        if(up_Dot_bp * up_Dot_bp > (cosSqr)) {\n          inBigFanR = true;\n        }\n      } \n      if(inBigFanR){\n        o.a = 0.862;\n      }\n\n      bool inFanR = false;\n\n      if(disUVP1 < disSqr1_2){\n        if (up_Dot_bp >= 0.0) {\n          if(up_Dot_bp * up_Dot_bp > (1.0-disSqr1_2-0.01) * cosSqr) {\n            inFanR = true;\n          }\n        } \n      }\n\n      if(inFanR || disUVB1 < disSqr_1) {\n        o.a = 0.0;\n        break;\n      }\n    }\n  }\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = o;\n}\n"
      }
    }
  ],
  "subMetas": {}
}