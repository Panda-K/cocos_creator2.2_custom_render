// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_playerPos: { value: [ 0.5, 0.5 ] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform ARGS {
    vec4 u_blocksPos[4];
    vec2 u_playerPos;

  };

  float energy(float r, vec2 point1, vec2 point2) {
    return (r * r) / ((point1.x - point2.x) * (point1.x - point2.x) + (point1.y - point2.y) * (point1.y - point2.y));
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 u_blocksPosV2[8];
    
    int index = 0;
    // for(int i = 0; i < 2; i++) {
    //   u_blocksPosV2[index] = u_blocksPos[i].xy;
    //   u_blocksPosV2[index+1] = u_blocksPos[i].zw;
    // }
    u_blocksPosV2[0] = u_blocksPos[0].xy;
    u_blocksPosV2[1] = u_blocksPos[0].zw;
    u_blocksPosV2[2] = u_blocksPos[1].xy;
    u_blocksPosV2[3] = u_blocksPos[1].zw;
    u_blocksPosV2[4] = u_blocksPos[2].xy;
    u_blocksPosV2[5] = u_blocksPos[2].zw;
    u_blocksPosV2[6] = u_blocksPos[3].xy;
    u_blocksPosV2[7] = u_blocksPos[3].zw;

    float disSqr_1 = 0.042*0.042;     //障碍物半径平方

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;

      #endif
    #endif

    o *= v_color;
    bool inArea = true;
    float fragEnergy = energy(0.2, v_uv0.xy, u_playerPos);
    float tmpA = 1.0 - smoothstep(0.5, 1.0, fragEnergy);
    o.a *= tmpA;
    float oldA = o.a;

    if(tmpA == 1.0){
      inArea = false;
    }

    if(inArea == true){
      for(int i = 0; i < 8; i++) {
        if(u_blocksPosV2[i].x == -1.0 || u_blocksPosV2[i].y == -1.0){
          continue;
        }

        vec2 block1 = u_blocksPosV2[i].xy;
        vec2 v_BP = normalize(block1 - u_playerPos);       //玩家--->障碍物
        vec2 v_UP = normalize(v_uv0 - u_playerPos);        //玩家--->纹理

        // float disPB = distance(u_playerPos, block1);
        // float disSqrPB1 = disPB*disPB;
        float disSqrPB1 = (u_playerPos.x-block1.x)*(u_playerPos.x-block1.x) + (u_playerPos.y-block1.y)*(u_playerPos.y-block1.y);      //玩家位置和障碍物1之间距离平方
        float disSqr1_2 = disSqrPB1 - disSqr_1;     //玩家位置和障碍物之间扇形半径平方
        float disUVP1 = (v_uv0.x-u_playerPos.x)*(v_uv0.x-u_playerPos.x) + (v_uv0.y-u_playerPos.y)*(v_uv0.y-u_playerPos.y);      //当前纹理和玩家之间距离平方
        float disUVB1 = (v_uv0.x-block1.x)*(v_uv0.x-block1.x) + (v_uv0.y-block1.y)*(v_uv0.y-block1.y);      //当前纹理和障碍物1之间距离平方W
        float cosSqr = 1.0 - (disSqr_1/disSqrPB1);
        float up_Dot_bp = dot(v_UP, v_BP);

        //大扇形区域
        bool inBigFanR = false;
        if (up_Dot_bp >= 0.0) {
          if(up_Dot_bp * up_Dot_bp > (cosSqr)) {
            inBigFanR = true;
          }
        } 
        if(inBigFanR){
          o.a = 0.862;
        }

        bool inFanR = false;      //在小扇形区域内
        if(disUVP1 < disSqr1_2){
          if (up_Dot_bp >= 0.0) {
            if(up_Dot_bp * up_Dot_bp > (1.0-disSqr1_2-0.01) * cosSqr) {
              inFanR = true;
            }
          } 
        }

        if(inFanR || disUVB1 < disSqr_1) {
          o.a = 0.0;
          break;
        }
      }
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
