// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        hightlightColor: { value: [1,1,1,1], editor: { type: color} }
        radius: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform myUniform{
    vec4 hightlightColor;
    float radius;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
    float sLeft = texture(texture, v_uv0 + vec2(radius, 0)).a;
    float sRight = texture(texture, v_uv0 - vec2(radius, 0)).a;
    float sTop = texture(texture, v_uv0 + vec2(0, radius)).a;
    float sDown = texture(texture, v_uv0 - vec2(0, radius)).a;

    float Res = sLeft + sRight + sTop + sDown;
    #endif

    // 无描边宽度即结束
    if (radius == 0.0) {
      return;
    }

    // 先画背景色
    vec4 color_dest = hightlightColor * Res;

    // 然后在背景色上方画图案颜色
    vec4 color_src = o;

    // 按照这个顺序，源颜色就是图案颜色，目标颜色就是背景色
    // 所以命名就是 color_src, color_dest

    // 按照混合颜色规则 http://docs.cocos.com/creator/manual/zh/advanced-topics/ui-auto-batch.html#blend-%E6%A8%A1%E5%BC%8F
    // 要在底色上方，画一个图案，图案完全挡住底色，那么最终选择的混合模式如下：
    // color_src: GL_SRC_ALPHA
    // color_dest: GL_ONE_MINUS_SRC_ALPHA
    // 即最终颜色如下：
    // color_src * GL_SRC_ALPHA + color_dest * GL_ONE_MINUS_SRC_ALPHA
    gl_FragColor = color_src * color_src.a + color_dest * (1.0 - color_src.a);
  }
}%
